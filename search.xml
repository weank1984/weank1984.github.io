<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>教她学算法-排序算法（下）</title>
      <link href="/2022/02/07/%E6%95%99%E5%A5%B9%E5%AD%A6%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2022/02/07/%E6%95%99%E5%A5%B9%E5%AD%A6%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3>]]></content>
      
      
      
        <tags>
            
            <tag> for her </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教她学算法-排序算法（上）</title>
      <link href="/2022/02/07/%E6%95%99%E5%A5%B9%E5%AD%A6%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2022/02/07/%E6%95%99%E5%A5%B9%E5%AD%A6%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本章将介绍几种较为简单的排序算法，并比较分析其时间复杂度和空间复杂度。</p><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><p>伪代码更接近自然语言，同时保留了高级语言的语法逻辑，便于理解。为了避免C++或者Java语法不同导致的阅读障碍，从本章开始引入伪代码。</p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入排序类似于打扑克时的抓牌阶段。每次我们从桌子上拿走一张牌，并将其插入到已经排序的手牌中。在计算机的实现中，为了在原来的数组中直接排序，我们需要给插入的元素腾出空间，每次插入前都需要将排在元素之后的所有数据向后挪动一位。</p><p>图例1: <img src="/images/selectionSort.gif" alt="insert"></p><p>伪代码 INSERTION-SORT(A)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j = <span class="number">2</span> to A.length</span><br><span class="line">    key = A[j]</span><br><span class="line">    i = j - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> A[i] &gt; key</span><br><span class="line">        A[i+<span class="number">1</span>] = [i]</span><br><span class="line">        i = i - <span class="number">1</span></span><br><span class="line">    A[i+<span class="number">1</span>] = key</span><br></pre></td></tr></table></figure><h4 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h4><p>平均时间复杂度：$O(n^2)$<br>空间复杂度：$O(1)$</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢”浮”到数列的顶端。</p><p>图例2: <img src="/images/bubbleSort.gif" alt="bubble"></p><p>伪代码 BUBBLE-SORT(A)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j = <span class="number">1</span> to A.length</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span> to A.length-i</span><br><span class="line">        <span class="keyword">if</span> A[i] &gt; A[i+<span class="number">1</span>]</span><br><span class="line">            <span class="built_in">swap</span>(A[i], A[i+<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p><h4 id="算法分析-1"><a href="#算法分析-1" class="headerlink" title="算法分析"></a>算法分析</h4><p>平均时间复杂度：$O(n^2)$<br>空间复杂度：$O(1)$</p>]]></content>
      
      
      
        <tags>
            
            <tag> for her </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
